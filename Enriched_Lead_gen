# Install required packages in your terminal (do not run pip install as a bare statement in this script):
# pip install requests pandas tqdm python-dotenv

import requests
import pandas as pd
from tqdm import tqdm
import time
import os
from dotenv import load_dotenv

# Load environment variables from .env in repo root
load_dotenv(r"c:\Users\DELL\Downloads\Revops Code\RevOps_Analytics_portfolio\.env")

# --- CONFIG ---
# Get API keys from environment instead of hard-coding
API_KEY = os.getenv("GOOGLE_API_KEY")
if not API_KEY:
    raise RuntimeError("GOOGLE_API_KEY not found in environment. Add it to the .env file.")

MAX_RESULTS = 150 # Set the maximum number of results you want to retrieve

# --- INPUTS ---
keyword = input("Enter business type (e.g. 'dentist', 'restaurant', 'marketing agency'): ")
location = input("Enter location (e.g. 'Ikeja Lagos', 'Abuja', 'Port Harcourt'): ")
radius = 10000  # meters

# --- PHASE 1: BASIC PLACE SEARCH WITH PAGINATION ---
search_url = f"https://maps.googleapis.com/maps/api/place/textsearch/json?query={keyword}+in+{location}&radius={radius}&key={API_KEY}"
all_places = []
next_page_token = None

while len(all_places) < MAX_RESULTS:
    if next_page_token:
        search_url = f"https://maps.googleapis.com/maps/api/place/textsearch/json?pagetoken={next_page_token}&key={API_KEY}"
    elif all_places: # Only request first page once
      break # Exit loop if no next_page_token and not the first page


    response = requests.get(search_url)
    data = response.json()

    places = data.get("results", [])
    all_places.extend(places)
    print(f"âœ… Found {len(places)} results in this page. Total results: {len(all_places)}")

    next_page_token = data.get("next_page_token")

    if not next_page_token or len(places) == 0:
        break
    time.sleep(2) # Add a delay to avoid rate limiting

print(f"âœ… Finished collecting initial results. Total results: {len(all_places)}")

# --- PHASE 2: PLACE DETAILS ENRICHMENT ---
details_url = "https://maps.googleapis.com/maps/api/place/details/json"
enriched_data = []

# Limit the number of places to process based on MAX_RESULTS
places_to_process = all_places[:MAX_RESULTS]


for place in tqdm(places_to_process, desc="Enriching leads"):
    place_id = place.get("place_id")
    params = {
        "place_id": place_id,
        "fields": "name,formatted_address,formatted_phone_number,website,rating,opening_hours,geometry",
        "key": API_KEY
    }
    details_resp = requests.get(details_url, params=params).json()
    details = details_resp.get("result", {})

    enriched_data.append({
        "Name": details.get("name"),
        "Address": details.get("formatted_address"),
        "Phone": details.get("formatted_phone_number"),
        "Website": details.get("website"),
        "Rating": details.get("rating"),
        "Open_Now": details.get("opening_hours", {}).get("open_now") if details.get("opening_hours") else None,
        "Maps_URL": f"https://www.google.com/maps/place/?q=place_id:{place_id}",
        "Location": location # Add the location to the DataFrame
    })

df = pd.DataFrame(enriched_data)

# --- EXPORT ---
file_name = f"{keyword}_{location}_enriched_leads.csv".replace(" ", "_")
df.to_csv(file_name, index=False)

print(f"ðŸ’¾ Exported {len(df)} enriched leads to '{file_name}'")

from google.colab import files
files.download(file_name)

# --- GIT CONFIG HELP (added) ---
def print_git_config_instructions():
    """
    Prints concise git config commands and verification steps.
    Use --global to set for all repos, omit --global to set for current repo only.
    """
    cmds = [
        'Set globally:',
        '  git config --global user.name "Your Name"',
        '  git config --global user.email "you@example.com"',
        '',
        'Set for current repo only (run inside repo):',
        '  git config user.name "Your Name"',
        '  git config user.email "you@example.com"',
        '',
        'Verify:',
        '  git config --list',
        '  git config user.name',
        '  git config user.email',
        '',
        'Edit global config file:',
        '  git config --global --edit',
        '',
        'Windows global file path:',
        r'  C:\Users\<YourUser>\.gitconfig'
    ]
    print("\n".join(cmds))

# Optionally call the helper (uncomment to print when this script runs)
# print_git_config_instructions()